(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./util/postcss"], factory);
    }
})(function (require, exports) {
    "use strict";
    var postcss_1 = require("./util/postcss");
    return function init(grunt) {
        var path = require('path');
        var fs = require('fs');
        var postCssImport = require('postcss-import');
        var postCssNext = require('postcss-cssnext');
        grunt.loadNpmTasks('grunt-postcss');
        var distDirectory = grunt.config.get('distDirectory') || '';
        var devDirectory = grunt.config.get('devDirectory') || '';
        var variablesProcessors = [
            postCssImport,
            postCssNext({
                features: {
                    customProperties: {
                        preserve: 'computed'
                    }
                }
            })
        ];
        function moduleFiles(dest) {
            return [{
                    expand: true,
                    src: ['**/*.m.css'],
                    dest: dest,
                    cwd: 'src'
                }];
        }
        var cssFiles = [{
                expand: true,
                src: ['**/*.css', '!**/*.m.css'],
                dest: distDirectory,
                cwd: 'src'
            }];
        grunt.config.set('postcss', {
            options: {
                map: true
            },
            'modules-dev': {
                files: moduleFiles(path.join(devDirectory, 'src')),
                options: {
                    processors: postcss_1.createProcessors(devDirectory)
                }
            },
            'modules-dist': {
                files: moduleFiles(distDirectory),
                options: {
                    processors: postcss_1.createProcessors(distDirectory, 'src', true)
                }
            },
            variables: {
                files: cssFiles,
                options: {
                    processors: variablesProcessors
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdGNzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBvc3Rjc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFBLDBDQUFrRDtJQUVsRCxPQUFTLGNBQWMsS0FBYTtRQUNuQyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0IsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLElBQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2hELElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQy9DLEtBQUssQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFcEMsSUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQVMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RFLElBQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFTLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVwRSxJQUFNLG1CQUFtQixHQUFRO1lBQ2hDLGFBQWE7WUFDYixXQUFXLENBQUM7Z0JBQ1gsUUFBUSxFQUFFO29CQUNULGdCQUFnQixFQUFFO3dCQUNqQixRQUFRLEVBQUUsVUFBVTtxQkFDcEI7aUJBQ0Q7YUFDRCxDQUFDO1NBQ0YsQ0FBQztRQUVGLHFCQUFxQixJQUFZO1lBQ2hDLE1BQU0sQ0FBQyxDQUFDO29CQUNQLE1BQU0sRUFBRSxJQUFJO29CQUNaLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQztvQkFDbkIsSUFBSSxFQUFFLElBQUk7b0JBQ1YsR0FBRyxFQUFFLEtBQUs7aUJBQ1YsQ0FBQyxDQUFDO1FBQ0osQ0FBQztRQUVELElBQU0sUUFBUSxHQUFHLENBQUM7Z0JBQ2pCLE1BQU0sRUFBRSxJQUFJO2dCQUNaLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUM7Z0JBQ2hDLElBQUksRUFBRSxhQUFhO2dCQUNuQixHQUFHLEVBQUUsS0FBSzthQUNWLENBQUMsQ0FBQztRQUVILEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRTtZQUMzQixPQUFPLEVBQUU7Z0JBQ1IsR0FBRyxFQUFFLElBQUk7YUFDVDtZQUNELGFBQWEsRUFBRTtnQkFDZCxLQUFLLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUNsRCxPQUFPLEVBQUU7b0JBQ1IsVUFBVSxFQUFFLDBCQUFnQixDQUFDLFlBQVksQ0FBQztpQkFDMUM7YUFDRDtZQUNELGNBQWMsRUFBRTtnQkFDZixLQUFLLEVBQUUsV0FBVyxDQUFDLGFBQWEsQ0FBQztnQkFDakMsT0FBTyxFQUFFO29CQUNSLFVBQVUsRUFBRSwwQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQztpQkFDeEQ7YUFDRDtZQUNELFNBQVMsRUFBRTtnQkFDVixLQUFLLEVBQUUsUUFBUTtnQkFDZixPQUFPLEVBQUU7b0JBQ1IsVUFBVSxFQUFFLG1CQUFtQjtpQkFDL0I7YUFDRDtTQUNELENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVByb2Nlc3NvcnMgfSBmcm9tICcuL3V0aWwvcG9zdGNzcyc7XG5cbmV4cG9ydCA9IGZ1bmN0aW9uIGluaXQoZ3J1bnQ6IElHcnVudCkge1xuXHRjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXHRjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cdGNvbnN0IHBvc3RDc3NJbXBvcnQgPSByZXF1aXJlKCdwb3N0Y3NzLWltcG9ydCcpO1xuXHRjb25zdCBwb3N0Q3NzTmV4dCA9IHJlcXVpcmUoJ3Bvc3Rjc3MtY3NzbmV4dCcpO1xuXHRncnVudC5sb2FkTnBtVGFza3MoJ2dydW50LXBvc3Rjc3MnKTtcblxuXHRjb25zdCBkaXN0RGlyZWN0b3J5ID0gZ3J1bnQuY29uZmlnLmdldDxzdHJpbmc+KCdkaXN0RGlyZWN0b3J5JykgfHwgJyc7XG5cdGNvbnN0IGRldkRpcmVjdG9yeSA9IGdydW50LmNvbmZpZy5nZXQ8c3RyaW5nPignZGV2RGlyZWN0b3J5JykgfHwgJyc7XG5cblx0Y29uc3QgdmFyaWFibGVzUHJvY2Vzc29yczogYW55ID0gW1xuXHRcdHBvc3RDc3NJbXBvcnQsXG5cdFx0cG9zdENzc05leHQoe1xuXHRcdFx0ZmVhdHVyZXM6IHtcblx0XHRcdFx0Y3VzdG9tUHJvcGVydGllczoge1xuXHRcdFx0XHRcdHByZXNlcnZlOiAnY29tcHV0ZWQnXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHRdO1xuXG5cdGZ1bmN0aW9uIG1vZHVsZUZpbGVzKGRlc3Q6IHN0cmluZykge1xuXHRcdHJldHVybiBbe1xuXHRcdFx0ZXhwYW5kOiB0cnVlLFxuXHRcdFx0c3JjOiBbJyoqLyoubS5jc3MnXSxcblx0XHRcdGRlc3Q6IGRlc3QsXG5cdFx0XHRjd2Q6ICdzcmMnXG5cdFx0fV07XG5cdH1cblxuXHRjb25zdCBjc3NGaWxlcyA9IFt7XG5cdFx0ZXhwYW5kOiB0cnVlLFxuXHRcdHNyYzogWycqKi8qLmNzcycsICchKiovKi5tLmNzcyddLFxuXHRcdGRlc3Q6IGRpc3REaXJlY3RvcnksXG5cdFx0Y3dkOiAnc3JjJ1xuXHR9XTtcblxuXHRncnVudC5jb25maWcuc2V0KCdwb3N0Y3NzJywge1xuXHRcdG9wdGlvbnM6IHtcblx0XHRcdG1hcDogdHJ1ZVxuXHRcdH0sXG5cdFx0J21vZHVsZXMtZGV2Jzoge1xuXHRcdFx0ZmlsZXM6IG1vZHVsZUZpbGVzKHBhdGguam9pbihkZXZEaXJlY3RvcnksICdzcmMnKSksXG5cdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdHByb2Nlc3NvcnM6IGNyZWF0ZVByb2Nlc3NvcnMoZGV2RGlyZWN0b3J5KVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0J21vZHVsZXMtZGlzdCc6IHtcblx0XHRcdGZpbGVzOiBtb2R1bGVGaWxlcyhkaXN0RGlyZWN0b3J5KSxcblx0XHRcdG9wdGlvbnM6IHtcblx0XHRcdFx0cHJvY2Vzc29yczogY3JlYXRlUHJvY2Vzc29ycyhkaXN0RGlyZWN0b3J5LCAnc3JjJywgdHJ1ZSlcblx0XHRcdH1cblx0XHR9LFxuXHRcdHZhcmlhYmxlczoge1xuXHRcdFx0ZmlsZXM6IGNzc0ZpbGVzLFxuXHRcdFx0b3B0aW9uczoge1xuXHRcdFx0XHRwcm9jZXNzb3JzOiB2YXJpYWJsZXNQcm9jZXNzb3JzXG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn07XG4iXX0=